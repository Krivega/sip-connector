/* eslint-disable import/no-extraneous-dependencies */
import stylisticPlugin from '@stylistic/eslint-plugin';
import tsPlugin from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';
import type { ESLint, Linter } from 'eslint';
import { rules as importPluginRules } from 'eslint-plugin-import';
import prettierPlugin from 'eslint-plugin-prettier';
import unicornPlugin from 'eslint-plugin-unicorn';
import globals from 'globals';

const config: Linter.Config[] = [
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      parser: tsParser as unknown as Linter.Parser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.es2021,
        ...globals.es2025,
      },
    },
    plugins: {
      unicorn: unicornPlugin,
      prettier: prettierPlugin,
      import: {
        meta: { name: 'eslint-plugin-import', version: '2.31.0' },
        rules: importPluginRules,
      },
      '@typescript-eslint': tsPlugin as unknown as ESLint.Plugin,
      '@stylistic': stylisticPlugin,
    },
    settings: {
      'import/resolver': {
        typescript: {},
      },
    },

    rules: {
      'no-dupe-else-if': ['error'],
      'no-promise-executor-return': ['error'],
      'no-unreachable-loop': [
        'error',
        {
          ignore: [],
        },
      ],
      'no-useless-backreference': ['error'],
      'require-atomic-updates': ['error'],
      'default-case-last': ['error'],
      'grouped-accessor-pairs': ['error'],
      'no-constructor-return': ['error'],
      'no-implicit-coercion': [
        'error',
        {
          boolean: false,
          number: true,
          string: true,
          allow: [],
        },
      ],
      'prefer-regex-literals': [
        'error',
        {
          disallowRedundantWrapping: true,
        },
      ],
      'capitalized-comments': [
        'error',
        'never',
        {
          line: {
            ignorePattern: '.*',
            ignoreInlineComments: true,
            ignoreConsecutiveComments: true,
          },
          block: {
            ignorePattern: '.*',
            ignoreInlineComments: true,
            ignoreConsecutiveComments: true,
          },
        },
      ],
      'arrow-body-style': ['error', 'always'],
      'no-dupe-keys': ['error'],
      'eol-last': ['error', 'always'],
      'padding-line-between-statements': [
        'error',
        {
          blankLine: 'always',
          prev: 'directive',
          next: '*',
        },
        {
          blankLine: 'any',
          prev: 'directive',
          next: 'directive',
        },
        {
          blankLine: 'always',
          prev: 'import',
          next: '*',
        },
        {
          blankLine: 'any',
          prev: 'import',
          next: 'import',
        },
        {
          blankLine: 'always',
          prev: '*',
          next: ['const', 'let', 'var', 'export'],
        },
        {
          blankLine: 'always',
          prev: ['const', 'let', 'var', 'export'],
          next: '*',
        },
        {
          blankLine: 'any',
          prev: ['const', 'let', 'var', 'export'],
          next: ['const', 'let', 'var', 'export'],
        },
        {
          blankLine: 'always',
          prev: '*',
          next: ['if', 'class', 'for', 'do', 'while', 'switch', 'try'],
        },
        {
          blankLine: 'always',
          prev: ['if', 'class', 'for', 'do', 'while', 'switch', 'try'],
          next: '*',
        },
        {
          blankLine: 'always',
          prev: '*',
          next: 'return',
        },
      ],
      'prettier/prettier': ['error'],
      'no-plusplus': [
        'error',
        {
          allowForLoopAfterthoughts: true,
        },
      ],
      'no-restricted-exports': [
        'error',
        {
          restrictDefaultExports: {
            defaultFrom: true,
            namedFrom: true,
          },
        },
      ],
      'import/no-deprecated': ['error'],
      'import/no-extraneous-dependencies': [
        'error',
        {
          devDependencies: [
            'vite.config.ts',
            'src/setupTests.ts',
            'src/testUtils.tsx',
            'src/mocks/**',
            'src/components/**/*.stories.{ts,tsx}',
            'src/components/**/*.cy.{ts,tsx}',
            '**/__tests__/*.{ts,tsx}',
          ],
        },
      ],
      'unicorn/prevent-abbreviations': [
        'error',
        {
          allowList: {
            i: true,
            j: true,
            args: true,
            Args: true,
            e2e: true,
            db: true,
            DB: true,
            props: true,
            Props: true,
            Prop: true,
            prop: true,
            Params: true,
            params: true,
            env: true,
            Env: true,
            prev: true,
            Prev: true,
            dir: true,
            Dir: true,
            utils: true,
            Utils: true,
            dev: true,
            Dev: true,
          },
        },
      ],
      'unicorn/filename-case': [
        'error',
        {
          cases: {
            camelCase: true,
            pascalCase: true,
          },
        },
      ],
      'unicorn/no-nested-ternary': ['error'],
      '@typescript-eslint/no-confusing-void-expression': [
        'error',
        {
          ignoreArrowShorthand: true,
        },
      ],
      '@typescript-eslint/no-use-before-define': [
        'error',
        {
          functions: true,
          classes: true,
          variables: true,
        },
      ],
      curly: ['error'],
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'variable',
          format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
        },
        {
          selector: 'function',
          format: ['camelCase', 'PascalCase'],
        },
        {
          selector: 'typeLike',
          format: ['PascalCase'],
        },
      ],
      '@typescript-eslint/default-param-last': ['error'],
      '@typescript-eslint/dot-notation': [
        'error',
        {
          allowKeywords: true,
          allowPattern: '',
          allowPrivateClassPropertyAccess: false,
          allowProtectedClassPropertyAccess: false,
          allowIndexSignaturePropertyAccess: false,
        },
      ],
      '@typescript-eslint/no-array-constructor': ['error'],
      '@typescript-eslint/no-dupe-class-members': ['error'],
      '@typescript-eslint/no-empty-function': [
        'error',
        {
          allow: ['arrowFunctions', 'functions', 'methods'],
        },
      ],
      '@typescript-eslint/no-implied-eval': ['error'],
      '@typescript-eslint/no-loss-of-precision': ['error'],
      '@typescript-eslint/no-loop-func': ['error'],
      '@typescript-eslint/no-redeclare': ['error'],
      '@typescript-eslint/no-shadow': ['error'],
      '@typescript-eslint/only-throw-error': 'error',
      '@typescript-eslint/no-unused-expressions': [
        'error',
        {
          allowShortCircuit: false,
          allowTernary: false,
          allowTaggedTemplates: false,
          enforceForJSX: false,
        },
      ],
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          vars: 'all',
          args: 'after-used',
          ignoreRestSiblings: true,
        },
      ],
      '@typescript-eslint/no-useless-constructor': ['error'],
      '@typescript-eslint/return-await': ['error', 'in-try-catch'],
      'import/extensions': [
        'error',
        'ignorePackages',
        {
          js: 'never',
          mjs: 'never',
          jsx: 'never',
          ts: 'never',
          tsx: 'never',
        },
      ],
      strict: ['error', 'never'],
      'import/export': ['error'],
      'import/no-named-as-default': ['error'],
      'import/no-mutable-exports': ['error'],
      'import/no-amd': ['error'],
      'import/first': ['error'],
      'import/no-duplicates': ['error'],
      'import/order': [
        'error',
        {
          groups: [['builtin', 'external', 'internal']],
          distinctGroup: true,
          warnOnUnassignedImports: false,
        },
      ],
      'import/newline-after-import': ['error'],
      'import/no-dynamic-require': ['error'],
      'import/no-webpack-loader-syntax': ['error'],
      'import/no-named-default': ['error'],
      'import/no-self-import': ['error'],
      'import/no-cycle': [
        'error',
        {
          maxDepth: 'âˆž',
          ignoreExternal: false,
          allowUnsafeDynamicCyclicDependency: false,
          disableScc: false,
        },
      ],
      'import/no-useless-path-segments': [
        'error',
        {
          commonjs: true,
        },
      ],
      'import/no-import-module-exports': [
        'error',
        {
          exceptions: [],
        },
      ],
      'import/no-relative-packages': ['error'],
      'no-class-assign': ['error'],
      'no-useless-computed-key': ['error'],
      'no-useless-rename': [
        'error',
        {
          ignoreDestructuring: false,
          ignoreImport: false,
          ignoreExport: false,
        },
      ],
      'no-var': ['error'],
      'object-shorthand': [
        'error',
        'always',
        {
          ignoreConstructors: false,
          avoidQuotes: true,
        },
      ],
      'prefer-arrow-callback': [
        'error',
        {
          allowNamedFunctions: false,
          allowUnboundThis: true,
        },
      ],
      'prefer-const': [
        'error',
        {
          destructuring: 'any',
          ignoreReadBeforeAssign: true,
        },
      ],
      'prefer-destructuring': [
        'error',
        {
          VariableDeclarator: {
            array: false,
            object: true,
          },
          AssignmentExpression: {
            array: true,
            object: false,
          },
        },
        {
          enforceForRenamedProperties: false,
        },
      ],
      'prefer-numeric-literals': ['error'],
      'prefer-rest-params': ['error'],
      'prefer-spread': ['error'],
      'prefer-template': ['error'],
      'require-yield': ['error'],
      'symbol-description': ['error'],
      'no-delete-var': ['error'],
      'no-label-var': ['error'],
      'no-restricted-globals': [
        'error',
        {
          name: 'isFinite',
          message:
            'Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite',
        },
        {
          name: 'isNaN',
          message:
            'Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan',
        },
        'addEventListener',
        'blur',
        'close',
        'closed',
        'confirm',
        'defaultStatus',
        'defaultstatus',
        'event',
        'external',
        'find',
        'focus',
        'frameElement',
        'frames',
        'history',
        'innerHeight',
        'innerWidth',
        'length',
        'location',
        'locationbar',
        'menubar',
        'moveBy',
        'moveTo',
        'name',
        'onblur',
        'onerror',
        'onfocus',
        'onload',
        'onresize',
        'onunload',
        'open',
        'opener',
        'opera',
        'outerHeight',
        'outerWidth',
        'pageXOffset',
        'pageYOffset',
        'parent',
        'print',
        'removeEventListener',
        'resizeBy',
        'resizeTo',
        'screen',
        'screenLeft',
        'screenTop',
        'screenX',
        'screenY',
        'scroll',
        'scrollbars',
        'scrollBy',
        'scrollTo',
        'scrollX',
        'scrollY',
        'self',
        'status',
        'statusbar',
        'stop',
        'toolbar',
        'top',
      ],
      'no-shadow-restricted-names': ['error'],
      'func-names': ['warn'],
      'lines-around-directive': [
        'error',
        {
          before: 'always',
          after: 'always',
        },
      ],

      'new-cap': [
        'error',
        {
          newIsCap: true,
          newIsCapExceptions: [],
          capIsNew: false,
          capIsNewExceptions: ['Immutable.Map', 'Immutable.Set', 'Immutable.List'],
          properties: true,
        },
      ],
      'no-bitwise': ['error'],
      'no-continue': ['error'],
      'no-multi-assign': ['error'],
      'no-new-object': ['error'],
      'no-underscore-dangle': [
        'error',
        {
          allow: [],
          allowAfterThis: false,
          allowAfterSuper: false,
          enforceInMethodNames: true,
          allowAfterThisConstructor: false,
          allowFunctionParams: true,
          enforceInClassFields: false,
          allowInArrayDestructuring: true,
          allowInObjectDestructuring: true,
        },
      ],
      'no-unneeded-ternary': [
        'error',
        {
          defaultAssignment: false,
        },
      ],
      'one-var': ['error', 'never'],
      'operator-assignment': ['error', 'always'],
      'prefer-exponentiation-operator': ['error'],
      'prefer-object-spread': ['error'],
      'spaced-comment': [
        'error',
        'always',
        {
          line: {
            exceptions: ['-', '+'],
            markers: ['=', '!', '/'],
          },
          block: {
            exceptions: ['-', '+'],
            markers: ['=', '!', ':', '::'],
            balanced: true,
          },
        },
      ],
      'unicode-bom': ['error', 'never'],
      'global-require': ['error'],
      'no-buffer-constructor': ['error'],
      'no-new-require': ['error'],
      'no-path-concat': ['error'],
      'for-direction': ['error'],
      'no-async-promise-executor': ['error'],
      'no-await-in-loop': ['error'],
      'no-compare-neg-zero': ['error'],
      'no-cond-assign': ['error', 'always'],
      'no-console': ['warn'],
      'no-constant-condition': ['warn'],
      'no-control-regex': ['error'],
      'no-debugger': ['error'],
      'no-duplicate-case': ['error'],
      'no-empty': ['error'],
      'no-empty-character-class': ['error'],
      'no-ex-assign': ['error'],
      'no-extra-boolean-cast': ['error'],
      'no-inner-declarations': ['error'],
      'no-invalid-regexp': ['error'],
      'no-irregular-whitespace': ['error'],
      'no-misleading-character-class': ['error'],
      'no-prototype-builtins': ['error'],
      'no-regex-spaces': ['error'],
      'no-sparse-arrays': ['error'],
      'no-template-curly-in-string': ['error'],
      'no-unsafe-finally': ['error'],
      'no-unsafe-optional-chaining': [
        'error',
        {
          disallowArithmeticOperators: true,
        },
      ],
      'use-isnan': ['error'],
      'array-callback-return': [
        'error',
        {
          allowImplicit: true,
          checkForEach: false,
          allowVoid: false,
        },
      ],
      'block-scoped-var': ['error'],

      'class-methods-use-this': [
        'error',
        {
          exceptMethods: [],
          enforceForClassFields: true,
        },
      ],
      'consistent-return': ['error'],
      'default-case': [
        'error',
        {
          commentPattern: '^no default$',
        },
      ],
      eqeqeq: [
        'error',
        'always',
        {
          null: 'ignore',
        },
      ],
      'guard-for-in': ['error'],
      'max-classes-per-file': ['error', 1],
      'no-alert': ['warn'],
      'no-caller': ['error'],
      'no-case-declarations': ['error'],
      'no-else-return': [
        'error',
        {
          allowElseIf: false,
        },
      ],
      'no-empty-pattern': ['error'],
      'no-eval': ['error'],
      'no-extend-native': ['error'],
      'no-extra-bind': ['error'],
      'no-extra-label': ['error'],
      'no-fallthrough': ['error'],
      'no-global-assign': [
        'error',
        {
          exceptions: [],
        },
      ],
      'no-iterator': ['error'],
      'no-labels': [
        'error',
        {
          allowLoop: false,
          allowSwitch: false,
        },
      ],
      'no-lone-blocks': ['error'],
      'no-multi-str': ['error'],
      'no-new': ['error'],
      'no-new-wrappers': ['error'],
      'no-nonoctal-decimal-escape': ['error'],
      'no-octal': ['error'],
      'no-octal-escape': ['error'],
      'no-param-reassign': [
        'error',
        {
          props: true,
          ignorePropertyModificationsFor: [
            'acc',
            'accumulator',
            'e',
            'ctx',
            'context',
            'req',
            'request',
            'res',
            'response',
            '$scope',
            'staticContext',
          ],
        },
      ],
      'no-proto': ['error'],
      'no-restricted-properties': [
        'error',
        {
          object: 'arguments',
          property: 'callee',
          message: 'arguments.callee is deprecated',
        },
        {
          object: 'global',
          property: 'isFinite',
          message: 'Please use Number.isFinite instead',
        },
        {
          object: 'self',
          property: 'isFinite',
          message: 'Please use Number.isFinite instead',
        },
        {
          object: 'window',
          property: 'isFinite',
          message: 'Please use Number.isFinite instead',
        },
        {
          object: 'global',
          property: 'isNaN',
          message: 'Please use Number.isNaN instead',
        },
        {
          object: 'self',
          property: 'isNaN',
          message: 'Please use Number.isNaN instead',
        },
        {
          object: 'window',
          property: 'isNaN',
          message: 'Please use Number.isNaN instead',
        },
        {
          property: '__defineGetter__',
          message: 'Please use Object.defineProperty instead.',
        },
        {
          property: '__defineSetter__',
          message: 'Please use Object.defineProperty instead.',
        },
        {
          object: 'Math',
          property: 'pow',
          message: 'Use the exponentiation operator (**) instead.',
        },
      ],
      'no-return-assign': ['error', 'always'],
      'no-script-url': ['error'],
      'no-self-assign': [
        'error',
        {
          props: true,
        },
      ],
      'no-self-compare': ['error'],
      'no-sequences': ['error'],
      'no-unused-labels': ['error'],
      'no-useless-catch': ['error'],
      'no-useless-concat': ['error'],
      'no-useless-escape': ['error'],
      'no-useless-return': ['error'],
      'no-void': ['error'],
      'no-with': ['error'],
      radix: ['error'],
      'vars-on-top': ['error'],
      yoda: ['error'],
      'unicorn/better-regex': ['error'],
      'unicorn/catch-error-name': ['error'],
      'unicorn/consistent-empty-array-spread': ['error'],
      'unicorn/consistent-function-scoping': [
        'error',
        {
          checkArrowFunctions: false,
        },
      ],
      'unicorn/error-message': ['error'],
      'unicorn/escape-case': ['error'],
      'unicorn/expiring-todo-comments': ['error'],
      'unicorn/explicit-length-check': ['error'],
      'unicorn/import-style': ['error'],
      'unicorn/new-for-builtins': ['error'],
      'unicorn/no-abusive-eslint-disable': ['error'],
      'unicorn/no-anonymous-default-export': ['error'],
      'unicorn/no-array-method-this-argument': ['error'],
      'unicorn/no-await-expression-member': ['error'],
      'unicorn/no-await-in-promise-methods': ['error'],
      'unicorn/no-console-spaces': ['error'],
      'unicorn/no-document-cookie': ['error'],
      'unicorn/no-empty-file': ['error'],
      'unicorn/no-for-loop': ['error'],
      'unicorn/no-hex-escape': ['error'],
      'unicorn/no-unnecessary-array-splice-count': ['error'],
      'unicorn/consistent-date-clone': ['error'],
      'unicorn/no-instanceof-builtins': ['error'],
      'unicorn/no-unnecessary-array-flat-depth': ['error'],
      'unicorn/no-instanceof-array': ['error'],
      'unicorn/no-invalid-fetch-options': ['error'],
      'unicorn/no-invalid-remove-event-listener': ['error'],
      'unicorn/no-unnecessary-slice-end': ['error'],
      'unicorn/no-lonely-if': ['error'],
      'unicorn/no-magic-array-flat-depth': ['error'],
      'unicorn/no-negated-condition': ['error'],
      'unicorn/no-negation-in-equality-check': ['error'],
      'unicorn/no-new-array': ['error'],
      'unicorn/no-new-buffer': ['error'],
      'unicorn/no-null': ['error'],
      'unicorn/no-object-as-default-parameter': ['error'],
      'unicorn/no-process-exit': ['error'],
      'unicorn/no-single-promise-in-promise-methods': ['error'],
      'unicorn/no-static-only-class': ['error'],
      'unicorn/no-thenable': ['error'],
      'unicorn/no-this-assignment': ['error'],
      'unicorn/no-typeof-undefined': ['error'],
      'unicorn/no-unnecessary-await': ['error'],
      'unicorn/no-unnecessary-polyfills': ['error'],
      'unicorn/no-unreadable-array-destructuring': ['error'],
      'unicorn/no-unreadable-iife': ['error'],
      'unicorn/no-useless-fallback-in-spread': ['error'],
      'unicorn/no-useless-length-check': ['error'],
      'unicorn/no-useless-promise-resolve-reject': ['error'],
      'unicorn/no-useless-spread': ['error'],
      'unicorn/no-useless-switch-case': ['error'],
      'unicorn/no-zero-fractions': ['error'],
      'unicorn/numeric-separators-style': ['error'],
      'unicorn/prefer-add-event-listener': ['error'],
      'unicorn/prefer-array-find': ['error'],
      'unicorn/prefer-array-flat-map': ['error'],
      'unicorn/prefer-array-flat': ['error'],
      'unicorn/prefer-array-index-of': ['error'],
      'unicorn/prefer-array-some': ['error'],
      'unicorn/prefer-at': ['error'],
      'unicorn/prefer-blob-reading-methods': ['error'],
      'unicorn/prefer-code-point': ['error'],
      'unicorn/prefer-date-now': ['error'],
      'unicorn/prefer-default-parameters': ['error'],
      'unicorn/prefer-dom-node-append': ['error'],
      'unicorn/prefer-dom-node-dataset': ['error'],
      'unicorn/prefer-dom-node-remove': ['error'],
      'unicorn/prefer-dom-node-text-content': ['error'],
      'unicorn/prefer-event-target': ['error'],
      'unicorn/prefer-export-from': ['error'],
      'unicorn/prefer-keyboard-event-key': ['error'],
      'unicorn/prefer-logical-operator-over-ternary': ['error'],
      'unicorn/prefer-math-trunc': ['error'],
      'unicorn/prefer-modern-dom-apis': ['error'],
      'unicorn/prefer-modern-math-apis': ['error'],
      'unicorn/prefer-module': ['error'],
      'unicorn/prefer-native-coercion-functions': ['error'],
      'unicorn/prefer-negative-index': ['error'],
      'unicorn/prefer-node-protocol': ['error'],
      'unicorn/prefer-number-properties': ['error'],
      'unicorn/prefer-object-from-entries': ['error'],
      'unicorn/prefer-optional-catch-binding': ['error'],
      'unicorn/prefer-prototype-methods': ['error'],
      'unicorn/prefer-query-selector': ['error'],
      'unicorn/prefer-reflect-apply': ['error'],
      'unicorn/prefer-regexp-test': ['error'],
      'unicorn/prefer-set-has': ['error'],
      'unicorn/prefer-set-size': ['error'],
      'unicorn/prefer-spread': ['error'],
      'unicorn/prefer-string-raw': ['error'],
      'unicorn/prefer-string-replace-all': ['error'],
      'unicorn/prefer-string-slice': ['error'],
      'unicorn/prefer-string-trim-start-end': ['error'],
      'unicorn/prefer-structured-clone': ['error'],
      'unicorn/prefer-switch': ['error'],
      'unicorn/prefer-top-level-await': ['error'],
      'unicorn/prefer-type-error': ['error'],
      'unicorn/relative-url-style': ['error'],
      'unicorn/require-array-join-separator': ['error'],
      'unicorn/require-number-to-fixed-digits-argument': ['error'],
      'unicorn/switch-case-braces': ['error'],
      'unicorn/text-encoding-identifier-case': ['error'],
      'unicorn/throw-new-error': ['error'],
      '@typescript-eslint/adjacent-overload-signatures': ['error'],
      '@typescript-eslint/array-type': ['error'],
      '@typescript-eslint/await-thenable': ['error'],
      '@typescript-eslint/ban-tslint-comment': ['error'],
      '@typescript-eslint/no-wrapper-object-types': 'error',
      '@typescript-eslint/no-empty-object-type': 'error',
      '@typescript-eslint/no-unsafe-function-type': 'error',
      '@typescript-eslint/no-restricted-types': 'error',
      '@typescript-eslint/class-literal-property-style': ['error'],
      '@typescript-eslint/consistent-generic-constructors': ['error'],
      '@typescript-eslint/consistent-indexed-object-style': ['error'],
      '@typescript-eslint/consistent-return': ['error'],
      '@typescript-eslint/consistent-type-assertions': ['error'],
      '@typescript-eslint/consistent-type-exports': ['error'],
      '@typescript-eslint/consistent-type-imports': ['error'],
      '@typescript-eslint/explicit-member-accessibility': ['error'],
      '@typescript-eslint/max-params': ['error'],
      '@typescript-eslint/member-ordering': ['error'],
      '@typescript-eslint/method-signature-style': ['error'],
      '@typescript-eslint/no-array-delete': ['error'],
      '@typescript-eslint/no-base-to-string': ['error'],
      '@typescript-eslint/no-confusing-non-null-assertion': ['error'],
      '@typescript-eslint/no-duplicate-enum-values': ['error'],
      '@typescript-eslint/no-duplicate-type-constituents': ['error'],
      '@typescript-eslint/no-dynamic-delete': ['error'],
      '@typescript-eslint/no-empty-interface': ['error'],
      '@typescript-eslint/no-explicit-any': ['error'],
      '@typescript-eslint/no-extra-non-null-assertion': ['error'],
      '@typescript-eslint/no-extraneous-class': ['error'],
      '@typescript-eslint/no-floating-promises': ['error'],
      '@typescript-eslint/no-for-in-array': ['error'],
      '@typescript-eslint/no-import-type-side-effects': ['error'],
      '@typescript-eslint/no-inferrable-types': ['error'],
      '@typescript-eslint/no-invalid-this': ['error'],
      '@typescript-eslint/no-invalid-void-type': ['error'],
      '@typescript-eslint/no-meaningless-void-operator': ['error'],
      '@typescript-eslint/no-misused-new': ['error'],
      '@typescript-eslint/no-misused-promises': ['error'],
      '@typescript-eslint/no-mixed-enums': ['error'],
      '@typescript-eslint/no-namespace': ['error'],
      '@typescript-eslint/no-non-null-asserted-nullish-coalescing': ['error'],
      '@typescript-eslint/no-non-null-asserted-optional-chain': ['error'],
      '@typescript-eslint/no-non-null-assertion': ['error'],
      '@typescript-eslint/no-redundant-type-constituents': ['error'],
      '@typescript-eslint/no-require-imports': ['error'],
      '@typescript-eslint/no-restricted-imports': ['error'],
      '@typescript-eslint/no-this-alias': ['error'],
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': ['error'],
      '@typescript-eslint/no-unnecessary-condition': ['error'],
      '@typescript-eslint/no-unnecessary-parameter-property-assignment': ['error'],
      '@typescript-eslint/no-unnecessary-qualifier': ['error'],
      '@typescript-eslint/no-unnecessary-template-expression': ['error'],
      '@typescript-eslint/no-unnecessary-type-arguments': ['error'],
      '@typescript-eslint/no-unnecessary-type-constraint': ['error'],
      '@typescript-eslint/no-unnecessary-type-parameters': ['error'],
      '@typescript-eslint/no-unsafe-argument': ['error'],
      '@typescript-eslint/no-unsafe-assignment': ['error'],
      '@typescript-eslint/no-unsafe-call': ['error'],
      '@typescript-eslint/no-unsafe-declaration-merging': ['error'],
      '@typescript-eslint/no-unsafe-enum-comparison': ['error'],
      '@typescript-eslint/no-unsafe-member-access': ['error'],
      '@typescript-eslint/no-unsafe-return': ['error'],
      '@typescript-eslint/no-unsafe-unary-minus': ['error'],
      '@typescript-eslint/no-useless-empty-export': ['error'],
      '@typescript-eslint/no-var-requires': ['error'],
      '@typescript-eslint/non-nullable-type-assertion-style': ['error'],
      '@typescript-eslint/parameter-properties': ['error'],
      '@typescript-eslint/prefer-as-const': ['error'],
      '@typescript-eslint/prefer-enum-initializers': ['error'],
      '@typescript-eslint/prefer-find': ['error'],
      '@typescript-eslint/prefer-for-of': ['error'],
      '@typescript-eslint/prefer-function-type': ['error'],
      '@typescript-eslint/prefer-includes': ['error'],
      '@typescript-eslint/prefer-literal-enum-member': ['error'],
      '@typescript-eslint/prefer-namespace-keyword': ['error'],
      '@typescript-eslint/prefer-nullish-coalescing': ['error'],
      '@typescript-eslint/prefer-optional-chain': ['error'],
      '@typescript-eslint/prefer-promise-reject-errors': [
        'error',
        {
          allowEmptyReject: true,
        },
      ],
      '@typescript-eslint/prefer-readonly': ['error'],
      '@typescript-eslint/prefer-reduce-type-parameter': ['error'],
      '@typescript-eslint/prefer-regexp-exec': ['error'],
      '@typescript-eslint/prefer-return-this-type': ['error'],
      '@typescript-eslint/prefer-string-starts-ends-with': ['error'],
      '@typescript-eslint/promise-function-async': ['error'],
      '@typescript-eslint/require-array-sort-compare': ['error'],
      '@typescript-eslint/restrict-plus-operands': ['error'],
      '@typescript-eslint/restrict-template-expressions': ['error'],
      '@typescript-eslint/strict-boolean-expressions': ['error'],
      '@typescript-eslint/switch-exhaustiveness-check': ['error'],
      '@typescript-eslint/triple-slash-reference': ['error'],
      '@typescript-eslint/typedef': ['error'],
      '@typescript-eslint/unbound-method': ['error'],
      '@typescript-eslint/unified-signatures': ['error'],
      '@typescript-eslint/use-unknown-in-catch-callback-variable': ['error'],
      'logical-assignment-operators': ['error'],
      'no-constant-binary-expression': ['error'],
      'no-empty-static-block': ['error'],
      'no-object-constructor': ['error'],
      'prefer-object-has-own': ['error'],
      '@stylistic/array-bracket-spacing': ['error', 'never'],
      '@stylistic/arrow-parens': [
        'error',
        'as-needed',
        {
          requireForBlockBody: true,
        },
      ],
      '@stylistic/arrow-spacing': ['error', { before: true, after: true }],
      '@stylistic/block-spacing': ['error', 'always'],
      '@stylistic/brace-style': ['error', '1tbs', { allowSingleLine: false }],
      '@stylistic/comma-dangle': ['error', 'always-multiline'],
      '@stylistic/comma-spacing': ['error', { before: false, after: true }],
      '@stylistic/comma-style': ['error', 'last'],
      '@stylistic/computed-property-spacing': [
        'error',
        'never',
        {
          enforceForClassMembers: true,
        },
      ],
      '@stylistic/no-extra-parens': ['error', 'functions'],
      '@stylistic/no-floating-decimal': ['error'],
      '@stylistic/no-mixed-operators': [
        'error',
        {
          allowSamePrecedence: true,
          groups: [
            ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
            ['&&', '||'],
            ['in', 'instanceof'],
          ],
        },
      ],
      '@stylistic/no-multi-spaces': ['error'],
      '@stylistic/dot-location': ['error', 'property'],
      '@stylistic/eol-last': ['error'],
      '@stylistic/function-call-spacing': ['error', 'never'],
      '@stylistic/key-spacing': ['error', { beforeColon: false, afterColon: true }],
      '@stylistic/keyword-spacing': ['error', { before: true, after: true }],
      '@stylistic/linebreak-style': ['error', 'unix'],
      '@stylistic/max-len': [
        'error',
        {
          code: 100,
          tabWidth: 2,
          ignoreUrls: true,
          ignoreComments: false,
          ignoreRegExpLiterals: true,
          ignoreStrings: true,
          ignoreTemplateLiterals: true,
        },
      ],
      '@stylistic/max-statements-per-line': ['error', { max: 1 }],
      '@stylistic/new-parens': ['error'],
      '@stylistic/no-mixed-spaces-and-tabs': ['error'],
      '@stylistic/no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 0 }],
      '@stylistic/no-tabs': ['error'],
      '@stylistic/no-trailing-spaces': ['error'],
      '@stylistic/no-whitespace-before-property': ['error'],
      '@stylistic/object-curly-spacing': ['error', 'always'],
      '@stylistic/object-property-newline': ['error', { allowAllPropertiesOnSameLine: true }],
      '@stylistic/operator-linebreak': [
        'error',
        'after',
        { overrides: { '?': 'before', ':': 'before', '|': 'before' } },
      ],
      '@stylistic/padded-blocks': ['error', 'never'],
      '@stylistic/quote-props': ['error', 'as-needed'],
      '@stylistic/quotes': ['error', 'single', { avoidEscape: true }],
      '@stylistic/rest-spread-spacing': ['error', 'never'],
      '@stylistic/semi-spacing': ['error', { before: false, after: true }],
      '@stylistic/space-before-blocks': ['error', 'always'],
      '@stylistic/space-before-function-paren': [
        'error',
        {
          anonymous: 'always',
          named: 'never',
          asyncArrow: 'always',
        },
      ],
      '@stylistic/space-in-parens': ['error', 'never'],
      '@stylistic/space-infix-ops': ['error'],
      '@stylistic/space-unary-ops': [
        'error',
        {
          words: true,
          nonwords: false,
        },
      ],
      '@stylistic/spaced-comment': [
        'error',
        'always',
        {
          line: {
            exceptions: ['-', '+'],
            markers: ['=', '!', '/'],
          },
          block: {
            exceptions: ['-', '+'],
            markers: ['=', '!', ':', '::'],
            balanced: true,
          },
        },
      ],
      '@stylistic/template-curly-spacing': ['error'],
      '@stylistic/template-tag-spacing': ['error', 'never'],
      '@stylistic/type-annotation-spacing': ['error'],
      '@stylistic/type-generic-spacing': ['error'],
      '@stylistic/type-named-tuple-spacing': ['error'],
      '@stylistic/wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
      '@stylistic/yield-star-spacing': ['error', 'both'],
      '@stylistic/semi': ['error', 'always'],
      '@stylistic/lines-between-class-members': [
        'error',
        'always',
        {
          exceptAfterSingleLine: false,
          exceptAfterOverload: true,
        },
      ],
    },
  },
];

export default config;
