<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="197" failures="0" errors="0" time="38.007">
  <testsuite name="hasIncludesString" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:26" time="8.096" tests="6">
    <testcase classname="hasIncludesString both undefined" name="hasIncludesString both undefined" time="0.008">
    </testcase>
    <testcase classname="hasIncludesString target undefined" name="hasIncludesString target undefined" time="0">
    </testcase>
    <testcase classname="hasIncludesString source undefined" name="hasIncludesString source undefined" time="0.001">
    </testcase>
    <testcase classname="hasIncludesString equal" name="hasIncludesString equal" time="0">
    </testcase>
    <testcase classname="hasIncludesString not equal" name="hasIncludesString not equal" time="0.001">
    </testcase>
    <testcase classname="hasIncludesString register" name="hasIncludesString register" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getExtraHeaders" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:26" time="8.072" tests="2">
    <testcase classname="getExtraHeaders #1 default" name="getExtraHeaders #1 default" time="0.013">
    </testcase>
    <testcase classname="getExtraHeaders #2 should have all headers when all params has set" name="getExtraHeaders #2 should have all headers when all params has set" time="0">
    </testcase>
  </testsuite>
  <testsuite name="setEncodingsToSender" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:26" time="8.417" tests="7">
    <testcase classname="setEncodingsToSender without targets" name="setEncodingsToSender without targets" time="0.039">
    </testcase>
    <testcase classname="setEncodingsToSender by scaleResolutionDownBy=2" name="setEncodingsToSender by scaleResolutionDownBy=2" time="0.001">
    </testcase>
    <testcase classname="setEncodingsToSender by scaleResolutionDownBy=2 repeat" name="setEncodingsToSender by scaleResolutionDownBy=2 repeat" time="0.001">
    </testcase>
    <testcase classname="setEncodingsToSender reset scaleResolutionDownBy to 1" name="setEncodingsToSender reset scaleResolutionDownBy to 1" time="0">
    </testcase>
    <testcase classname="setEncodingsToSender reset scaleResolutionDownBy to 2 after 1" name="setEncodingsToSender reset scaleResolutionDownBy to 2 after 1" time="0.001">
    </testcase>
    <testcase classname="setEncodingsToSender by scaleResolutionDownBy less then 1" name="setEncodingsToSender by scaleResolutionDownBy less then 1" time="0.001">
    </testcase>
    <testcase classname="setEncodingsToSender by scaleResolutionDownBy less then 1 after 2" name="setEncodingsToSender by scaleResolutionDownBy less then 1 after 2" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="processSender" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:26" time="8.555" tests="10">
    <testcase classname="processSender by track 1024" name="processSender by track 1024" time="0.014">
    </testcase>
    <testcase classname="processSender by track 1024 after MAX_MAIN_CAM_RESOLUTION" name="processSender by track 1024 after MAX_MAIN_CAM_RESOLUTION" time="0.002">
    </testcase>
    <testcase classname="processSender MAX_MAIN_CAM_RESOLUTION" name="processSender MAX_MAIN_CAM_RESOLUTION" time="0.001">
    </testcase>
    <testcase classname="processSender PAUSE_MAIN_CAM" name="processSender PAUSE_MAIN_CAM" time="0.004">
    </testcase>
    <testcase classname="processSender RESUME_MAIN_CAM" name="processSender RESUME_MAIN_CAM" time="0.001">
    </testcase>
    <testcase classname="processSender RESUME_MAIN_CAM 2" name="processSender RESUME_MAIN_CAM 2" time="0">
    </testcase>
    <testcase classname="processSender MAX_MAIN_CAM_RESOLUTION for av1" name="processSender MAX_MAIN_CAM_RESOLUTION for av1" time="0">
    </testcase>
    <testcase classname="processSender PAUSE_MAIN_CAM for av1" name="processSender PAUSE_MAIN_CAM for av1" time="0.003">
    </testcase>
    <testcase classname="processSender RESUME_MAIN_CAM for av1" name="processSender RESUME_MAIN_CAM for av1" time="0.002">
    </testcase>
    <testcase classname="processSender RESUME_MAIN_CAM 2 for av1" name="processSender RESUME_MAIN_CAM 2 for av1" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="actionsProgressCall" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:35" time="8.159" tests="8">
    <testcase classname="actionsProgressCall #1 check onBeforeProgressCall, onSuccessProgressCall, onFinishProgressCall" name="actionsProgressCall #1 check onBeforeProgressCall, onSuccessProgressCall, onFinishProgressCall" time="0.708">
    </testcase>
    <testcase classname="actionsProgressCall #2 check onFailProgressCall" name="actionsProgressCall #2 check onFailProgressCall" time="0.059">
    </testcase>
    <testcase classname="actionsProgressCall #3 check onEndedCall when ended" name="actionsProgressCall #3 check onEndedCall when ended" time="0.702">
    </testcase>
    <testcase classname="actionsProgressCall #4 check onEndedCall when ended: second call" name="actionsProgressCall #4 check onEndedCall when ended: second call" time="1.402">
    </testcase>
    <testcase classname="actionsProgressCall #5 check onEndedCall when failed" name="actionsProgressCall #5 check onEndedCall when failed" time="0.702">
    </testcase>
    <testcase classname="actionsProgressCall #6 check onEndedCall when failed: second call" name="actionsProgressCall #6 check onEndedCall when failed: second call" time="1.406">
    </testcase>
    <testcase classname="actionsProgressCall #7 check onEndedCall when race: failed first" name="actionsProgressCall #7 check onEndedCall when race: failed first" time="1.404">
    </testcase>
    <testcase classname="actionsProgressCall #8 check onEndedCall when race: ended first" name="actionsProgressCall #8 check onEndedCall when race: ended first" time="1.402">
    </testcase>
  </testsuite>
  <testsuite name="presentation" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:34" time="9.387" tests="8">
    <testcase classname="presentation twice start presentation" name="presentation twice start presentation" time="1.108">
    </testcase>
    <testcase classname="presentation isPendingPresentation and for start presentation" name="presentation isPendingPresentation and for start presentation" time="1.104">
    </testcase>
    <testcase classname="presentation clear after hungUp for start presentation" name="presentation clear after hungUp for start presentation" time="1.103">
    </testcase>
    <testcase classname="presentation isPendingPresentation and promisePendingStopPresentation for stop presentation" name="presentation isPendingPresentation and promisePendingStopPresentation for stop presentation" time="1.102">
    </testcase>
    <testcase classname="presentation clear after hungUp for stop presentation" name="presentation clear after hungUp for stop presentation" time="1.103">
    </testcase>
    <testcase classname="presentation update presentation after start" name="presentation update presentation after start" time="1.104">
    </testcase>
    <testcase classname="presentation update presentation before startPresentation promise resolved" name="presentation update presentation before startPresentation promise resolved" time="1.105">
    </testcase>
    <testcase classname="presentation update presentation without start" name="presentation update presentation without start" time="1.106">
    </testcase>
  </testsuite>
  <testsuite name="incoming call" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:34" time="10.711" tests="12">
    <testcase classname="incoming call init" name="incoming call init" time="0.406">
    </testcase>
    <testcase classname="incoming call answer" name="incoming call answer" time="1.106">
    </testcase>
    <testcase classname="incoming call remote caller data" name="incoming call remote caller data" time="0.402">
    </testcase>
    <testcase classname="incoming call order tracks mediaStream: answer" name="incoming call order tracks mediaStream: answer" time="1.103">
    </testcase>
    <testcase classname="incoming call order tracks mediaStream: answer: reverse" name="incoming call order tracks mediaStream: answer: reverse" time="1.104">
    </testcase>
    <testcase classname="incoming call decline" name="incoming call decline" time="0.503">
    </testcase>
    <testcase classname="incoming call failed" name="incoming call failed" time="0.503">
    </testcase>
    <testcase classname="incoming call terminated" name="incoming call terminated" time="0.502">
    </testcase>
    <testcase classname="incoming call answer without videoMode and audioMode" name="incoming call answer without videoMode and audioMode" time="1.102">
    </testcase>
    <testcase classname="incoming call answer with videoMode=recvonly" name="incoming call answer with videoMode=recvonly" time="1.103">
    </testcase>
    <testcase classname="incoming call answer with audioMode=recvonly" name="incoming call answer with audioMode=recvonly" time="1.13">
    </testcase>
    <testcase classname="incoming call answer with videoMode=recvonly audioMode=recvonly" name="incoming call answer with videoMode=recvonly audioMode=recvonly" time="1.105">
    </testcase>
  </testsuite>
  <testsuite name="connect" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:44" time="5.935" tests="14">
    <testcase classname="connect authorization user" name="connect authorization user" time="0.401">
    </testcase>
    <testcase classname="connect authorization user with wrong password" name="connect authorization user with wrong password" time="0.401">
    </testcase>
    <testcase classname="connect and change sipServerUrl" name="connect and change sipServerUrl" time="0.802">
    </testcase>
    <testcase classname="connect authorization user with displayName" name="connect authorization user with displayName" time="0.403">
    </testcase>
    <testcase classname="connect without authorization" name="connect without authorization" time="0.001">
    </testcase>
    <testcase classname="connect without authorization without displayName" name="connect without authorization without displayName" time="0.001">
    </testcase>
    <testcase classname="connect connectionConfiguration after connect" name="connect connectionConfiguration after connect" time="0.402">
    </testcase>
    <testcase classname="connect set password after with authorization" name="connect set password after with authorization" time="0.813">
    </testcase>
    <testcase classname="connect set same password after with authorization" name="connect set same password after with authorization" time="0.403">
    </testcase>
    <testcase classname="connect set displayName after with authorization" name="connect set displayName after with authorization" time="0.401">
    </testcase>
    <testcase classname="connect send base extraHeaders" name="connect send base extraHeaders" time="0.401">
    </testcase>
    <testcase classname="connect send extraHeaders with remoteAddress" name="connect send extraHeaders with remoteAddress" time="0.402">
    </testcase>
    <testcase classname="connect send extended extraHeaders" name="connect send extended extraHeaders" time="0.401">
    </testcase>
    <testcase classname="connect send extended extraHeaders with remoteAddress" name="connect send extended extraHeaders with remoteAddress" time="0.401">
    </testcase>
  </testsuite>
  <testsuite name="sync media state" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:34" time="16.1" tests="14">
    <testcase classname="sync media state admin sync media state forced when start main cam" name="sync media state admin sync media state forced when start main cam" time="1.108">
    </testcase>
    <testcase classname="sync media state admin sync media state is not forced when start main cam" name="sync media state admin sync media state is not forced when start main cam" time="1.102">
    </testcase>
    <testcase classname="sync media state admin sync media state forced when stop main cam" name="sync media state admin sync media state forced when stop main cam" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state is not forced when stop main cam" name="sync media state admin sync media state is not forced when stop main cam" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state forced when start mic" name="sync media state admin sync media state forced when start mic" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state is not forced when start mic" name="sync media state admin sync media state is not forced when start mic" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state forced when stop mic" name="sync media state admin sync media state forced when stop mic" time="1.102">
    </testcase>
    <testcase classname="sync media state admin sync media state is not forced when stop mic" name="sync media state admin sync media state is not forced when stop mic" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state forced when resume main cam" name="sync media state admin sync media state forced when resume main cam" time="1.104">
    </testcase>
    <testcase classname="sync media state admin sync media state is not forced when resume main cam" name="sync media state admin sync media state is not forced when resume main cam" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state forced when pause main cam" name="sync media state admin sync media state forced when pause main cam" time="1.103">
    </testcase>
    <testcase classname="sync media state admin sync media state is not forced when pause main cam" name="sync media state admin sync media state is not forced when pause main cam" time="1.104">
    </testcase>
    <testcase classname="sync media state waitSyncMediaState force sync" name="sync media state waitSyncMediaState force sync" time="1.103">
    </testcase>
    <testcase classname="sync media state waitSyncMediaState do not force sync" name="sync media state waitSyncMediaState do not force sync" time="1.102">
    </testcase>
  </testsuite>
  <testsuite name="call" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:26" time="24.519" tests="18">
    <testcase classname="call base call" name="call base call" time="1.126">
    </testcase>
    <testcase classname="call connectionConfiguration after call" name="call connectionConfiguration after call" time="1.104">
    </testcase>
    <testcase classname="call isCallActive is true after call" name="call isCallActive is true after call" time="1.102">
    </testcase>
    <testcase classname="call order tracks mediaStream: call" name="call order tracks mediaStream: call" time="1.102">
    </testcase>
    <testcase classname="call order tracks mediaStream: call: reverse" name="call order tracks mediaStream: call: reverse" time="1.102">
    </testcase>
    <testcase classname="call getRemoteStreams" name="call getRemoteStreams" time="1.104">
    </testcase>
    <testcase classname="call hangUp" name="call hangUp" time="1.203">
    </testcase>
    <testcase classname="call disconnect after end call from server" name="call disconnect after end call from server" time="1.103">
    </testcase>
    <testcase classname="call disconnect after decline call from server: wait to decline" name="call disconnect after decline call from server: wait to decline" time="0.803">
    </testcase>
    <testcase classname="call disconnect after decline call from server: dont wait to decline" name="call disconnect after decline call from server: dont wait to decline" time="0.406">
    </testcase>
    <testcase classname="call disconnect after confirm call from server: dont wait to confirm" name="call disconnect after confirm call from server: dont wait to confirm" time="0.403">
    </testcase>
    <testcase classname="call disconnect after confirm call from server: wait to confirm" name="call disconnect after confirm call from server: wait to confirm" time="1.103">
    </testcase>
    <testcase classname="call Clean up remoteStreams after end call from server" name="call Clean up remoteStreams after end call from server" time="1.106">
    </testcase>
    <testcase classname="call end call from server" name="call end call from server" time="1.103">
    </testcase>
    <testcase classname="call calls without videoMode and audioMode" name="call calls without videoMode and audioMode" time="1.101">
    </testcase>
    <testcase classname="call calls with videoMode=recvonly" name="call calls with videoMode=recvonly" time="1.103">
    </testcase>
    <testcase classname="call calls with audioMode=recvonly" name="call calls with audioMode=recvonly" time="1.105">
    </testcase>
    <testcase classname="call calls with videoMode=recvonly audioMode=recvonly" name="call calls with videoMode=recvonly audioMode=recvonly" time="1.102">
    </testcase>
  </testsuite>
  <testsuite name="call with no video tracks" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:45" time="5.819" tests="5">
    <testcase classname="call with no video tracks should exist peerconnection when call with no video tracks" name="call with no video tracks should exist peerconnection when call with no video tracks" time="1.104">
    </testcase>
    <testcase classname="call with no video tracks isCallActive is true after call" name="call with no video tracks isCallActive is true after call" time="1.102">
    </testcase>
    <testcase classname="call with no video tracks getRemoteStreams" name="call with no video tracks getRemoteStreams" time="1.103">
    </testcase>
    <testcase classname="call with no video tracks should no exist video tracks in incoming mediaStream when call with no video" name="call with no video tracks should no exist video tracks in incoming mediaStream when call with no video" time="1.102">
    </testcase>
    <testcase classname="call with no video tracks tracks on senders" name="call with no video tracks tracks on senders" time="1.102">
    </testcase>
  </testsuite>
  <testsuite name="processRequest" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:43" time="8.036" tests="22">
    <testcase classname="processRequest #1 Unregistered user: correct" name="processRequest #1 Unregistered user: correct" time="0.002">
    </testcase>
    <testcase classname="processRequest #2 Unregistered user isRequiredDisplayName=false: correct" name="processRequest #2 Unregistered user isRequiredDisplayName=false: correct" time="0.002">
    </testcase>
    <testcase classname="processRequest #3 Unregistered user change isRequiredDisplayName to true: correct" name="processRequest #3 Unregistered user change isRequiredDisplayName to true: correct" time="0.001">
    </testcase>
    <testcase classname="processRequest #4 Unregistered user: remove displayName" name="processRequest #4 Unregistered user: remove displayName" time="0.004">
    </testcase>
    <testcase classname="processRequest #5 Registered user: correct" name="processRequest #5 Registered user: correct" time="0.402">
    </testcase>
    <testcase classname="processRequest #6 Registered user: remove name" name="processRequest #6 Registered user: remove name" time="0.41">
    </testcase>
    <testcase classname="processRequest #7 Registered user: incorrect password" name="processRequest #7 Registered user: incorrect password" time="0.403">
    </testcase>
    <testcase classname="processRequest #8 Registered user: incorrect name" name="processRequest #8 Registered user: incorrect name" time="0.401">
    </testcase>
    <testcase classname="processRequest #9 sync changed displayName" name="processRequest #9 sync changed displayName" time="0.002">
    </testcase>
    <testcase classname="processRequest #10 debounce changed displayName" name="processRequest #10 debounce changed displayName" time="0.002">
    </testcase>
    <testcase classname="processRequest #11 async changed displayName" name="processRequest #11 async changed displayName" time="0.303">
    </testcase>
    <testcase classname="processRequest #12 sync changed name" name="processRequest #12 sync changed name" time="0.802">
    </testcase>
    <testcase classname="processRequest #13 sync remove name" name="processRequest #13 sync remove name" time="0.403">
    </testcase>
    <testcase classname="processRequest #14 debounce changed name" name="processRequest #14 debounce changed name" time="0.401">
    </testcase>
    <testcase classname="processRequest # 15async changed name" name="processRequest # 15async changed name" time="1.103">
    </testcase>
    <testcase classname="processRequest #16 sync changed password" name="processRequest #16 sync changed password" time="1.203">
    </testcase>
    <testcase classname="processRequest #17 sync remove password" name="processRequest #17 sync remove password" time="0.402">
    </testcase>
    <testcase classname="processRequest #18 debounce changed password" name="processRequest #18 debounce changed password" time="0.401">
    </testcase>
    <testcase classname="processRequest #19 debounce changed registered, with PasswordChanged" name="processRequest #19 debounce changed registered, with PasswordChanged" time="0.402">
    </testcase>
    <testcase classname="processRequest #20 debounce changed registered, with NameChanged" name="processRequest #20 debounce changed registered, with NameChanged" time="0.402">
    </testcase>
    <testcase classname="processRequest #21 change sipServerUrl" name="processRequest #21 change sipServerUrl" time="0.002">
    </testcase>
    <testcase classname="processRequest #22 change sipWebSocketServerURL" name="processRequest #22 change sipWebSocketServerURL" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="actionsProgressIncomingCall" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:50" time="3.777" tests="4">
    <testcase classname="actionsProgressIncomingCall #1 check onBeforeProgressCall, onSuccessProgressCall, onFinishProgressCall" name="actionsProgressIncomingCall #1 check onBeforeProgressCall, onSuccessProgressCall, onFinishProgressCall" time="1.008">
    </testcase>
    <testcase classname="actionsProgressIncomingCall #2 check onFailProgressCall" name="actionsProgressIncomingCall #2 check onFailProgressCall" time="0.444">
    </testcase>
    <testcase classname="actionsProgressIncomingCall #3 check onEndedCall when ended" name="actionsProgressIncomingCall #3 check onEndedCall when ended" time="1.003">
    </testcase>
    <testcase classname="actionsProgressIncomingCall #4 check onEndedCall when failed" name="actionsProgressIncomingCall #4 check onEndedCall when failed" time="1.004">
    </testcase>
  </testsuite>
  <testsuite name="events" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:50" time="3.639" tests="3">
    <testcase classname="events availableSecondRemoteStream" name="events availableSecondRemoteStream" time="1.11">
    </testcase>
    <testcase classname="events notAvailableSecondRemoteStream" name="events notAvailableSecondRemoteStream" time="1.102">
    </testcase>
    <testcase classname="events mustStopPresentation" name="events mustStopPresentation" time="1.103">
    </testcase>
  </testsuite>
  <testsuite name="use license" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:51" time="3.678" tests="3">
    <testcase classname="use license use license audio" name="use license use license audio" time="1.106">
    </testcase>
    <testcase classname="use license use license video" name="use license use license video" time="1.103">
    </testcase>
    <testcase classname="use license use license audio plus presentation" name="use license use license audio plus presentation" time="1.103">
    </testcase>
  </testsuite>
  <testsuite name="media state" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:50" time="4.776" tests="4">
    <testcase classname="media state sendRefusalToTurnOnMic" name="media state sendRefusalToTurnOnMic" time="1.105">
    </testcase>
    <testcase classname="media state sendRefusalToTurnOnCam" name="media state sendRefusalToTurnOnCam" time="1.103">
    </testcase>
    <testcase classname="media state sendRefusalToTurnOnMic rejected" name="media state sendRefusalToTurnOnMic rejected" time="1.103">
    </testcase>
    <testcase classname="media state sendRefusalToTurnOnCam rejected" name="media state sendRefusalToTurnOnCam rejected" time="1.103">
    </testcase>
  </testsuite>
  <testsuite name="main cam control" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:51" time="3.656" tests="3">
    <testcase classname="main cam control event" name="main cam control event" time="1.105">
    </testcase>
    <testcase classname="main cam control admin start main cam" name="main cam control admin start main cam" time="1.102">
    </testcase>
    <testcase classname="main cam control admin stop main cam" name="main cam control admin stop main cam" time="1.104">
    </testcase>
  </testsuite>
  <testsuite name="channels" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:54" time="2.593" tests="2">
    <testcase classname="channels waitChannels" name="channels waitChannels" time="1.104">
    </testcase>
    <testcase classname="channels sendChannels" name="channels sendChannels" time="1.103">
    </testcase>
  </testsuite>
  <testsuite name="webcast notify" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:54" time="2.665" tests="2">
    <testcase classname="webcast notify event webcast:started" name="webcast notify event webcast:started" time="1.106">
    </testcase>
    <testcase classname="webcast notify event webcast:stopped" name="webcast notify event webcast:stopped" time="1.104">
    </testcase>
  </testsuite>
  <testsuite name="mic control" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:54" time="2.621" tests="2">
    <testcase classname="mic control admin start mic" name="mic control admin start mic" time="1.107">
    </testcase>
    <testcase classname="mic control admin stop mic" name="mic control admin stop mic" time="1.104">
    </testcase>
  </testsuite>
  <testsuite name="participant notify" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:54" time="2.623" tests="2">
    <testcase classname="participant notify wait participant notify event added-to-list-moderators" name="participant notify wait participant notify event added-to-list-moderators" time="1.125">
    </testcase>
    <testcase classname="participant notify wait participant notify event removed-from-list-moderators" name="participant notify wait participant notify event removed-from-list-moderators" time="1.104">
    </testcase>
  </testsuite>
  <testsuite name="participants moveRequests" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:54" time="3.691" tests="3">
    <testcase classname="participants moveRequests event participation:accepting-word-request" name="participants moveRequests event participation:accepting-word-request" time="1.106">
    </testcase>
    <testcase classname="participants moveRequests event participation:cancelling-word-request" name="participants moveRequests event participation:cancelling-word-request" time="1.103">
    </testcase>
    <testcase classname="participants moveRequests event participant:move-request-to-stream" name="participants moveRequests event participant:move-request-to-stream" time="1.104">
    </testcase>
  </testsuite>
  <testsuite name="actions" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:58" time="1.511" tests="2">
    <testcase classname="actions unregister" name="actions unregister" time="0.403">
    </testcase>
    <testcase classname="actions tryRegister" name="actions tryRegister" time="0.803">
    </testcase>
  </testsuite>
  <testsuite name="account notify" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:57" time="2.489" tests="2">
    <testcase classname="account notify event account:changed" name="account notify event account:changed" time="1.103">
    </testcase>
    <testcase classname="account notify event account:deleted" name="account notify event account:deleted" time="1.103">
    </testcase>
  </testsuite>
  <testsuite name="channels notify" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:57" time="2.216" tests="2">
    <testcase classname="channels notify wait channels notify event authorized" name="channels notify wait channels notify event authorized" time="1.104">
    </testcase>
    <testcase classname="channels notify wait channels notify event unauthorized" name="channels notify wait channels notify event unauthorized" time="0.701">
    </testcase>
  </testsuite>
  <testsuite name="connectToServer" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:57" time="2.407" tests="9">
    <testcase classname="connectToServer registered" name="connectToServer registered" time="0.403">
    </testcase>
    <testcase classname="connectToServer registered async" name="connectToServer registered async" time="0.403">
    </testcase>
    <testcase classname="connectToServer registered sync" name="connectToServer registered sync" time="1.204">
    </testcase>
    <testcase classname="connectToServer unregistered" name="connectToServer unregistered" time="0.001">
    </testcase>
    <testcase classname="connectToServer unregistered async" name="connectToServer unregistered async" time="0.002">
    </testcase>
    <testcase classname="connectToServer change sipServerUrl" name="connectToServer change sipServerUrl" time="0.001">
    </testcase>
    <testcase classname="connectToServer change sipWebSocketServerUrl" name="connectToServer change sipWebSocketServerUrl" time="0.001">
    </testcase>
    <testcase classname="connectToServer should be closed web-socket connection when wss-request has failed and isDisconnectOnFail is true" name="connectToServer should be closed web-socket connection when wss-request has failed and isDisconnectOnFail is true" time="0.001">
    </testcase>
    <testcase classname="connectToServer should not be closed web-socket connection when wss-request has failed and isDisconnectOnFail is false" name="connectToServer should not be closed web-socket connection when wss-request has failed and isDisconnectOnFail is false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="media state" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:57" time="2.65" tests="2">
    <testcase classname="media state sendMediaState" name="media state sendMediaState" time="1.104">
    </testcase>
    <testcase classname="media state sendMediaState rejected" name="media state sendMediaState rejected" time="1.105">
    </testcase>
  </testsuite>
  <testsuite name="call statuses" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:59" time="1.439" tests="1">
    <testcase classname="call statuses call statuses events should be triggered in correct order" name="call statuses call statuses events should be triggered in correct order" time="1.105">
    </testcase>
  </testsuite>
  <testsuite name="answerIncomingCall" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:59" time="1.36" tests="1">
    <testcase classname="answerIncomingCall #1 check answer" name="answerIncomingCall #1 check answer" time="1.016">
    </testcase>
  </testsuite>
  <testsuite name="callToServer" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:00" time="1.101" tests="1">
    <testcase classname="callToServer check call" name="callToServer check call" time="0.71">
    </testcase>
  </testsuite>
  <testsuite name="incoming call statuses" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:02:59" time="1.431" tests="1">
    <testcase classname="incoming call statuses call statuses events should be triggered in correct order" name="incoming call statuses call statuses events should be triggered in correct order" time="1.005">
    </testcase>
  </testsuite>
  <testsuite name="sendDTMFAccumulated" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:00" time="1.254" tests="1">
    <testcase classname="sendDTMFAccumulated should be sent dtmf from sendDTMFAccumulated" name="sendDTMFAccumulated should be sent dtmf from sendDTMFAccumulated" time="0.805">
    </testcase>
  </testsuite>
  <testsuite name="media state: resolveOnStopMainCam" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.496" tests="2">
    <testcase classname="media state: resolveOnStopMainCam #1 should subscribe media event and call handler on event trigger" name="media state: resolveOnStopMainCam #1 should subscribe media event and call handler on event trigger" time="0.004">
    </testcase>
    <testcase classname="media state: resolveOnStopMainCam #2 should unsubscribe media event" name="media state: resolveOnStopMainCam #2 should unsubscribe media event" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="media state: resolveOnStopMic" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.446" tests="2">
    <testcase classname="media state: resolveOnStopMic #1 should subscribe media event and call handler on event trigger" name="media state: resolveOnStopMic #1 should subscribe media event and call handler on event trigger" time="0.002">
    </testcase>
    <testcase classname="media state: resolveOnStopMic #2 should unsubscribe media event" name="media state: resolveOnStopMic #2 should unsubscribe media event" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="media state: resolveOnStartMainCam" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.479" tests="2">
    <testcase classname="media state: resolveOnStartMainCam #1 should subscribe media event and call handler on event trigger" name="media state: resolveOnStartMainCam #1 should subscribe media event and call handler on event trigger" time="0.002">
    </testcase>
    <testcase classname="media state: resolveOnStartMainCam #2 should unsubscribe media event" name="media state: resolveOnStartMainCam #2 should unsubscribe media event" time="0">
    </testcase>
  </testsuite>
  <testsuite name="disconnect" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.836" tests="1">
    <testcase classname="disconnect authorization user" name="disconnect authorization user" time="0.402">
    </testcase>
  </testsuite>
  <testsuite name="conference participant token issued notify" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="1.201" tests="1">
    <testcase classname="conference participant token issued notify event conference:participant-token-issued" name="conference participant token issued notify event conference:participant-token-issued" time="0.703">
    </testcase>
  </testsuite>
  <testsuite name="media state: resolveOnUseLicense" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.512" tests="2">
    <testcase classname="media state: resolveOnUseLicense #1 should subscribe media event and call handler on event trigger" name="media state: resolveOnUseLicense #1 should subscribe media event and call handler on event trigger" time="0.002">
    </testcase>
    <testcase classname="media state: resolveOnUseLicense #2 should unsubscribe media event" name="media state: resolveOnUseLicense #2 should unsubscribe media event" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="media state: resolveOnStartMic" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.547" tests="2">
    <testcase classname="media state: resolveOnStartMic #1 should subscribe media event and call handler on event trigger" name="media state: resolveOnStartMic #1 should subscribe media event and call handler on event trigger" time="0.002">
    </testcase>
    <testcase classname="media state: resolveOnStartMic #2 should unsubscribe media event" name="media state: resolveOnStartMic #2 should unsubscribe media event" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:01" time="0.617" tests="1">
    <testcase classname="Logger enableDebug/disableDebug" name="Logger enableDebug/disableDebug" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="media state: create state" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:02" time="0.426" tests="2">
    <testcase classname="media state: create state #1 start with successful wait sync media state" name="media state: create state #1 start with successful wait sync media state" time="0.004">
    </testcase>
    <testcase classname="media state: create state #2 stop should unsubscribe from media state events" name="media state: create state #2 stop should unsubscribe from media state events" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="validateAPI" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:02" time="0.404" tests="4">
    <testcase classname="validateAPI not full data: sipServerUrl" name="validateAPI not full data: sipServerUrl" time="0.001">
    </testcase>
    <testcase classname="validateAPI not full data: sipWebSocketServerURL" name="validateAPI not full data: sipWebSocketServerURL" time="0">
    </testcase>
    <testcase classname="validateAPI not full data: not user with authorization user" name="validateAPI not full data: not user with authorization user" time="0.001">
    </testcase>
    <testcase classname="validateAPI not full data: not password with authorization user" name="validateAPI not full data: not password with authorization user" time="0">
    </testcase>
  </testsuite>
  <testsuite name="checkTelephony" errors="0" failures="0" skipped="0" timestamp="2024-02-07T11:03:02" time="0.361" tests="2">
    <testcase classname="checkTelephony should be resolved request when telephony is ready" name="checkTelephony should be resolved request when telephony is ready" time="0.003">
    </testcase>
    <testcase classname="checkTelephony should fail request when telephony is not ready" name="checkTelephony should fail request when telephony is not ready" time="0.001">
    </testcase>
  </testsuite>
</testsuites>